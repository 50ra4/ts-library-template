# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches:
      - main
    types: [closed]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "Test"
  test:
    name: Test
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')

    # node version
    strategy:
      matrix:
        node-version: ["14.16"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Setup node
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # Install npm packages
      - name: Install npm package
        run: |
          npm install
          
      # Check type
      - name: check type
        run: |
          npm run check-type

      # Check build
      - name: check build
        run: |
          npm run build

      # Check test
      - name: test
        run: |
          npm run test

  # This workflow contains a single job called "preparation"
  preparation:
    name: Preparation
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')
    outputs:
      new_version: ${{ steps.get_the_versions.outputs.NEW_VERSION }}
      previous_version: ${{ steps.get_the_versions.outputs.PREVIOUS_VERSION }}
      latest_commit_hash: ${{ steps.get_the_versions.outputs.LATEST_COMMIT_HASH }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get the versions
        id: get_the_versions
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          NEW_VERSION=$(echo "$HEAD_REF" | awk -F "/" '{ print $2 }')
          PREVIOUS_VERSION=$(git tag --sort=-creatordate | sed -n 1p)
          LATEST_COMMIT_HASH=$(git rev-parse HEAD)
          echo "NEW_VERSION: $NEW_VERSION, PREVIOUS_TAG: $PREVIOUS_TAG, LATEST_COMMIT_HASH: $LATEST_COMMIT_HASH"
          echo ::set-output name=NEW_VERSION::$NEW_VERSION
          echo ::set-output name=PREVIOUS_VERSION::$PREVIOUS_VERSION
          echo ::set-output name=LATEST_COMMIT_HASH::$LATEST_COMMIT_HASH

  # This workflow contains a single job called "release"
  release:
    name: Create Release
    needs: [preparation, test]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        if: needs.preparation.outputs.new_version != needs.preparation.outputs.previous_version
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Get commit summary
      - name: Get Commit Summary
        id: get_commit_summary
        if: needs.preparation.outputs.new_version != needs.preparation.outputs.previous_version
        env:
          VERSION: ${{ needs.preparation.outputs.new_version }}
          PREVIOUS_TAG: ${{ needs.preparation.outputs.previous_version }}
          LATEST_COMMIT_HASH: ${{ needs.preparation.outputs.latest_commit_hash }}
        run: |
          COMMIT_SUMMARY="$(git log --oneline --pretty=tformat:"%h %s" $PREVIOUS_TAG..$LATEST_COMMIT_HASH)"
          COMMIT_SUMMARY="${COMMIT_SUMMARY//$'\n'/'%0A'}"
          echo ::set-output name=COMMIT_SUMMARY::$COMMIT_SUMMARY

      # Create Release
      - name: Create Release
        id: create_release
        if: needs.preparation.outputs.new_version != needs.preparation.outputs.previous_version
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.preparation.outputs.new_version }}
          release_name: Release ${{ needs.preparation.outputs.new_version }}
          body: |
            ${{ steps.get_commit_summary.outputs.COMMIT_SUMMARY }}
          draft: false
          prerelease: false

  # This workflow contains a single job called "publish_github_package"
  publish_github_package:
    name: Publish github package
    needs: [preparation, test, release]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')

    # node version
    strategy:
      matrix:
        node-version: ["14.16"]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      # GitHub パッケージに公開する .npmrc ファイルを設定する
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com'
          # デフォルトはワークフローファイルを所有するユーザまたは Organization
          scope: '@50ra4'

      # Install npm packages
      - name: Install npm package
        run: |
          npm install

      # Check build
      - name: check build
        run: |
          npm run build

      # GitHub パッケージに公開する
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # FIXME: 
  # # This workflow contains a single job called "publish_npm_package"
  # publish_npm_package:
  #   name: Publish npm package
  #   needs: [preparation, test, release]
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/v')

  #   # node version
  #   strategy:
  #     matrix:
  #       node-version: ["14.16"]

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2

  #     # Setup node
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #         registry-url: 'https://registry.npmjs.org'

  #     # Install npm packages
  #     - name: Install npm package
  #       run: |
  #         npm install

  #     # Check build
  #     - name: check build
  #       run: |
  #         npm run build

  #     # npmに公開する
  #     - name: Publish to npm
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #       run: |
  #         npm publish --access public
